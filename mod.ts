export * from "./Types/FhirTypes.ts";

export type { Address  as  IAddress } from"./Interfaces/Address.ts"
export type { Age  as  IAge } from"./Interfaces/Age.ts"
export type { Annotation  as  IAnnotation } from"./Interfaces/Annotation.ts"
export type { Appointment  as  IAppointment } from"./Interfaces/Appointment.ts"
export type { AppointmentParticipant  as  IAppointmentParticipant } from"./Interfaces/AppointmentParticipant.ts"
export type { Attachment  as  IAttachment } from"./Interfaces/Attachment.ts"
export type { BackboneElement  as  IBackboneElement } from"./Interfaces/BackboneElement.ts"
export type { CodeableConcept  as  ICodeableConcept } from"./Interfaces/CodeableConcept.ts"
export type { Coding  as  ICoding } from"./Interfaces/Coding.ts"
export type { Consent  as  IConsent } from"./Interfaces/Consent.ts"
export type { ConsentActor  as  IConsentActor } from"./Interfaces/ConsentActor.ts"
export type { ConsentData  as  IConsentData } from"./Interfaces/ConsentData.ts"
export type { ConsentExcept  as  IConsentExcept } from"./Interfaces/ConsentExcept.ts"
export type { ConsentExceptActor  as  IConsentExceptActor } from"./Interfaces/ConsentExceptActor.ts"
export type { ConsentExceptData  as  IConsentExceptData } from"./Interfaces/ConsentExceptData.ts"
export type { ConsentPolicy  as  IConsentPolicy } from"./Interfaces/ConsentPolicy.ts"
export type { ConsentProvision  as  IConsentProvision } from"./Interfaces/ConsentProvision.ts"
export type { ContactDetail  as  IContactDetail } from"./Interfaces/ContactDetail.ts"
export type { ContactPoint  as  IContactPoint } from"./Interfaces/ContactPoint.ts"
export type { Count  as  ICount } from"./Interfaces/Count.ts"
export type { Distance  as  IDistance } from"./Interfaces/Distance.ts"
export type { DomainResource  as  IDomainResource } from"./Interfaces/DomainResource.ts"
export type { Duration  as  IDuration } from"./Interfaces/Duration.ts"
export type { Element  as  IElement } from"./Interfaces/Element.ts"
export type { Extension  as  IExtension } from"./Interfaces/Extension.ts"
export type { HumanName  as  IHumanName } from"./Interfaces/HumanName.ts"
export type { Identifier  as  IIdentifier } from"./Interfaces/Identifier.ts"
export type { Location  as  ILocation } from"./Interfaces/Location.ts"
export type { LocationPosition  as  ILocationPosition } from"./Interfaces/LocationPosition.ts"
export type { Meta  as  IMeta } from"./Interfaces/Meta.ts"
export type { Money  as  IMoney } from"./Interfaces/Money.ts"
export type { Narrative  as  INarrative } from"./Interfaces/Narrative.ts"
export type { OperationDefinitionParameterBinding  as  IOperationDefinitionParameterBinding } from"./Interfaces/OperationDefinitionParameterBinding.ts"
export type { OperationDefinition  as  IOperationDefinition } from"./Interfaces/OperationDefinition.ts"
export type { OperationDefinitionOverload  as  IOperationDefinitionOverload } from"./Interfaces/OperationDefinitionOverload.ts"
export type { OperationDefinitionParameter  as  IOperationDefinitionParameter } from"./Interfaces/OperationDefinitionParameter.ts"
export type { OperationOutcome  as  IOperationOutcome } from"./Interfaces/OperationOutcome.ts"
export type { OperationOutcomeIssue  as  IOperationOutcomeIssue } from"./Interfaces/OperationOutcomeIssue.ts"
export type { Patient  as  IPatient } from"./Interfaces/Patient.ts"
export type { PatientAnimal  as  IPatientAnimal } from"./Interfaces/PatientAnimal.ts"
export type { PatientCommunication  as  IPatientCommunication } from"./Interfaces/PatientCommunication.ts"
export type { PatientContact  as  IPatientContact } from"./Interfaces/PatientContact.ts"
export type { PatientLink  as  IPatientLink } from"./Interfaces/PatientLink.ts"
export type { Period  as  IPeriod } from"./Interfaces/Period.ts"
export type { Practitioner  as  IPractitioner } from"./Interfaces/Practitioner.ts"
export type { PractitionerQualification  as  IPractitionerQualification } from"./Interfaces/PractitionerQualification.ts"
export type { Quantity  as  IQuantity } from"./Interfaces/Quantity.ts"
export type { Questionnaire  as  IQuestionnaire } from"./Interfaces/Questionnaire.ts"
export type { QuestionnaireItem  as  IQuestionnaireItem } from"./Interfaces/QuestionnaireItem.ts"
export type { QuestionnaireItemAnswerOption  as  IQuestionnaireItemAnswerOption } from"./Interfaces/QuestionnaireItemAnswerOption.ts"
export type { QuestionnaireItemEnableWhen  as  IQuestionnaireItemEnableWhen } from"./Interfaces/QuestionnaireItemEnableWhen.ts"
export type { QuestionnaireResponse  as  IQuestionnaireResponse } from"./Interfaces/QuestionnaireResponse.ts"
export type { QuestionnaireResponseItem  as  IQuestionnaireResponseItem } from"./Interfaces/QuestionnaireResponseItem.ts"
export type { QuestionnaireResponseItemAnswer  as  IQuestionnaireResponseItemAnswer } from"./Interfaces/QuestionnaireResponseItemAnswer.ts"
export type { Range  as  IRange } from"./Interfaces/Range.ts"
export type { Ratio  as  IRatio } from"./Interfaces/Ratio.ts"
export type { Reference  as  IReference } from"./Interfaces/Reference.ts"
export type { RelatedPerson  as  IRelatedPerson } from"./Interfaces/RelatedPerson.ts"
export type { Resource  as  IResource } from"./Interfaces/Resource.ts"
export type { ResourceBase  as  IResourceBase } from"./Interfaces/ResourceBase.ts"
export type { SampledData  as  ISampledData } from"./Interfaces/SampledData.ts"
export type { SearchParameter  as  ISearchParameter } from"./Interfaces/SearchParameter.ts"
export type { SearchParameterComponent  as  ISearchParameterComponent } from"./Interfaces/SearchParameterComponent.ts"
export type { Signature  as  ISignature } from"./Interfaces/Signature.ts"
export type { Timing  as  ITiming } from"./Interfaces/Timing.ts"
export type { TimingRepeat  as  ITimingRepeat } from"./Interfaces/TimingRepeat.ts"
export type { UsageContext  as  IUsageContext } from"./Interfaces/UsageContext.ts"
export type { UserSession  as  IUserSession } from"./Interfaces/UserSession.ts"
export type { UserSessionStatus  as  IUserSessionStatus } from"./Interfaces/UserSessionStatus.ts"
                        
